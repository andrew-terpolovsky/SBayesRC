// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cutLD
bool cutLD(std::string ldm, std::string outfile, double cutThresh);
RcppExport SEXP _SBayesRC_cutLD(SEXP ldmSEXP, SEXP outfileSEXP, SEXP cutThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< double >::type cutThresh(cutThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(cutLD(ldm, outfile, cutThresh));
    return rcpp_result_gen;
END_RCPP
}
// impGa
NumericVector impGa(std::string ldm, Eigen::Map<Eigen::VectorXd> z, Eigen::Map<Eigen::VectorXi> typedIndex, int m, double cutThresh, double diag_mod);
RcppExport SEXP _SBayesRC_impGa(SEXP ldmSEXP, SEXP zSEXP, SEXP typedIndexSEXP, SEXP mSEXP, SEXP cutThreshSEXP, SEXP diag_modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ldm(ldmSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type typedIndex(typedIndexSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type cutThresh(cutThreshSEXP);
    Rcpp::traits::input_parameter< double >::type diag_mod(diag_modSEXP);
    rcpp_result_gen = Rcpp::wrap(impGa(ldm, z, typedIndex, m, cutThresh, diag_mod));
    return rcpp_result_gen;
END_RCPP
}
// sbayesr_eigen_joint_annot
List sbayesr_eigen_joint_annot(int niter, int burn, Eigen::Map<Eigen::VectorXd> bhat, int numAnno, std::string mldmDir, double vary, Eigen::Map<Eigen::VectorXd> blkN, Eigen::Map<Eigen::VectorXd> cgamma, Eigen::Map<Eigen::VectorXd> startPi, double starth2, double cutThresh, bool bOrigin, std::string outPrefix, std::string samVe, double resam_thresh, bool bOutDetail);
RcppExport SEXP _SBayesRC_sbayesr_eigen_joint_annot(SEXP niterSEXP, SEXP burnSEXP, SEXP bhatSEXP, SEXP numAnnoSEXP, SEXP mldmDirSEXP, SEXP varySEXP, SEXP blkNSEXP, SEXP cgammaSEXP, SEXP startPiSEXP, SEXP starth2SEXP, SEXP cutThreshSEXP, SEXP bOriginSEXP, SEXP outPrefixSEXP, SEXP samVeSEXP, SEXP resam_threshSEXP, SEXP bOutDetailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type bhat(bhatSEXP);
    Rcpp::traits::input_parameter< int >::type numAnno(numAnnoSEXP);
    Rcpp::traits::input_parameter< std::string >::type mldmDir(mldmDirSEXP);
    Rcpp::traits::input_parameter< double >::type vary(varySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type blkN(blkNSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type cgamma(cgammaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type startPi(startPiSEXP);
    Rcpp::traits::input_parameter< double >::type starth2(starth2SEXP);
    Rcpp::traits::input_parameter< double >::type cutThresh(cutThreshSEXP);
    Rcpp::traits::input_parameter< bool >::type bOrigin(bOriginSEXP);
    Rcpp::traits::input_parameter< std::string >::type outPrefix(outPrefixSEXP);
    Rcpp::traits::input_parameter< std::string >::type samVe(samVeSEXP);
    Rcpp::traits::input_parameter< double >::type resam_thresh(resam_threshSEXP);
    Rcpp::traits::input_parameter< bool >::type bOutDetail(bOutDetailSEXP);
    rcpp_result_gen = Rcpp::wrap(sbayesr_eigen_joint_annot(niter, burn, bhat, numAnno, mldmDir, vary, blkN, cgamma, startPi, starth2, cutThresh, bOrigin, outPrefix, samVe, resam_thresh, bOutDetail));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SBayesRC_cutLD", (DL_FUNC) &_SBayesRC_cutLD, 3},
    {"_SBayesRC_impGa", (DL_FUNC) &_SBayesRC_impGa, 6},
    {"_SBayesRC_sbayesr_eigen_joint_annot", (DL_FUNC) &_SBayesRC_sbayesr_eigen_joint_annot, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_SBayesRC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
